import numpy as np

x1 = np.array([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1],
               [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
               [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
               [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
               [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
               [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
               [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
               [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
               [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
               [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
               [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
               [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]])

x2 = np.array([[-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1]])

x3 = np.array([[1, 1, 1, 1, 1, 1, 1, 1, -1, -1],
               [1, 1, 1, 1, 1, 1, 1, 1, -1, -1],
               [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
               [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
               [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
               [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
               [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
               [1, 1, 1, 1, 1, 1, 1, 1, -1, -1],
               [1, 1, 1, 1, 1, 1, 1, 1, -1, -1],
               [1, 1, 1, -1, -1, -1, -1, -1, -1, -1],
               [1, 1, 1, -1, -1, -1, -1, -1, -1, -1],
               [1, 1, 1, -1, -1, -1, -1, -1, -1, -1],
               [1, 1, 1, -1, -1, -1, -1, -1, -1, -1],
               [1, 1, 1, -1, -1, -1, -1, -1, -1, -1],
               [1, 1, 1, 1, 1, 1, 1, 1, -1, -1],
               [1, 1, 1, 1, 1, 1, 1, 1, -1, -1]])

x4 = np.array([[-1, -1, 1, 1, 1, 1, 1, 1, -1, -1],
               [-1, -1, 1, 1, 1, 1, 1, 1, 1, -1],
               [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
               [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
               [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
               [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
               [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
               [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1],
               [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1],
               [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
               [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
               [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
               [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
               [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
               [-1, -1, 1, 1, 1, 1, 1, 1, 1, -1],
               [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1]])

x5 = np.array([[-1, 1, 1, -1, -1, -1, -1, 1, 1, -1],
               [-1, 1, 1, -1, -1, -1, -1, 1, 1, -1],
               [-1, 1, 1, -1, -1, -1, -1, 1, 1, -1],
               [-1, 1, 1, -1, -1, -1, -1, 1, 1, -1],
               [-1, 1, 1, -1, -1, -1, -1, 1, 1, -1],
               [-1, 1, 1, -1, -1, -1, -1, 1, 1, -1],
               [-1, 1, 1, -1, -1, -1, -1, 1, 1, -1],
               [-1, 1, 1, 1, 1, 1, 1, 1, 1, -1],
               [-1, 1, 1, 1, 1, 1, 1, 1, 1, -1],
               [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1],
               [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1],
               [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1],
               [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1],
               [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1],
               [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1],
               [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1]])

feed_pattern = np.array(
    [[-1, 1, 1, 1, 1, 1, 1, -1, -1, -1], [1, -1, -1, -1, -1, -1, 1, 1, 1, 1], [-1, 1, 1, 1, 1, -1, -1, -1, -1, -1],
     [1, 1, -1, 1, 1, 1, 1, -1, -1, 1], [-1, -1, 1, -1, 1, 1, -1, -1, 1, -1], [-1, -1, -1, -1, 1, 1, -1, -1, -1, 1],
     [1, -1, 1, 1, 1, -1, -1, 1, 1, -1], [-1, 1, 1, 1, 1, -1, 1, 1, 1, -1], [1, 1, -1, 1, -1, 1, -1, -1, 1, 1],
     [1, 1, -1, -1, -1, 1, 1, -1, 1, -1], [-1, 1, -1, 1, -1, -1, 1, 1, 1, -1], [-1, -1, 1, -1, 1, 1, -1, -1, 1, 1],
     [-1, -1, -1, -1, -1, 1, 1, 1, 1, -1], [1, 1, 1, -1, -1, -1, -1, 1, 1, 1], [1, -1, 1, 1, 1, -1, 1, 1, 1, 1],
     [1, -1, -1, -1, 1, -1, -1, 1, 1, -1]])
N = 160
x1 = x1.reshape(N, 1)
x2 = x2.reshape(N, 1)
x3 = x3.reshape(N, 1)
x4 = x4.reshape(N, 1)
x5 = x5.reshape(N, 1)
feed_pattern = feed_pattern.reshape(N, 1)

patterns = np.hstack((x1, x2, x3, x4, x5))

weight_matrix = np.dot(patterns, patterns.T) / N
np.fill_diagonal(weight_matrix, 0)
updated_pattern = np.zeros((N, 1))

while True:
    for i in range(N):
        weight = weight_matrix[:, i]
        b = np.dot(weight, feed_pattern)
        if b == 0:
            b = 1
        new_bit = np.sign(b)
        updated_pattern[i, 0] = new_bit

    if np.array_equiv(updated_pattern,feed_pattern):
        break
    else:
        feed_pattern = updated_pattern

# distances = []
# for i in range(5):
#     pattern_i = patterns[:, i]
#     summation = sum([(updated_pattern[j,0] - pattern_i[j])**2 for j in range(N)])
#     distance = summation / (4*N)
#     distances.append(distance)
#
# print(distances)
# updated_pattern = updated_pattern.reshape(16, 10)

print(updated_pattern)

for i in range(5):
    if np.array_equiv(patterns[:, i:i + 1],updated_pattern):     #(patterns[:, i:i + 1] == updated_pattern).all():
        print('hej')

        print(patterns[:, i:i + 1])
        print(updated_pattern)
